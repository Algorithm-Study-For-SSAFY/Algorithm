
//Main_백준_2229_조 짜기_

import java.io.*;
import java.util.*;


public class Main_2229_조짜기 {
	static int N;
	static int[] nums;
	static int[] dif; // i 와 i+1 간 차이의 절댓값
	static int[] sign; // i와 i+1 의 관계 (증가, 유지, 감소)
	static int[] memo; // i까지의 최댓값을 저장
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		N = Integer.parseInt(br.readLine());
		nums = new int[N]; 
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			nums[i] = Integer.parseInt(st.nextToken());
		}
		
		dif = new int[N];
		sign = new int[N];
		
		
		dif = new int[N-1];
		for (int i = 0; i < N-1; i++) {
			dif[i] = Math.abs(nums[i+1] - nums[i]);
			sign[i] = (int) Math.signum(nums[i+1] - nums[i]);
		}
		// sign이 1이면 증가 , -1이면 감소, 0이면 유지.
		
		memo = new int[N+2];
		memo[0] = 0;
		memo[1] = Math.abs(nums[1] - nums[0]);
		memo[2] = getMaxDifAmongThree(2);
	
		for (int i = 3; i < N; i++) {
			makeMaxSum(i);
		}
		
		
		System.out.println(memo[N-1]);
		
	} // end of Main
	
	// 굳이 안봐도 됨 memo[2] 저장해주려고 만듬
	static int getMaxDifAmongThree(int idx) {
		int max = Math.abs(nums[idx-2] - nums[idx-1]);
		max = Math.max(Math.abs(nums[idx-2] - nums[idx]), max);
		max = Math.max(Math.abs(nums[idx-1] - nums[idx]), max);
		return max;
	}
	
	
	
	
	static void makeMaxSum(int idx) {
		
		// 계속 증가하거나, 감소하는 중이면 그냥 더한 값이 최댓값이 됨
		if(sign[idx-2] == sign[idx-1]) {
			memo[idx] = memo[idx-1] + Math.abs(nums[idx] - nums[idx-1]);
		}
		
		// 아니면 좀 생각해봐야함... 잘 읽어 봐주세요...하하
		else {
			int max = Math.max(memo[idx-2] + Math.abs(nums[idx] - nums[idx-1]),memo[idx-3] +  Math.abs(nums[idx-1] - nums[idx-2]));			
			max = Math.max(max, memo[idx-1]);
			memo[idx] = max;
		}
		
	}
	

	
}// end of class

