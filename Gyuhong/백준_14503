
//Main_백준_14465_소가 길을 건너간 이유5_

import java.io.*;
import java.util.*;

public class Main {
	
	static int N;
	static int M;
	static int[][] map;
	static int r;
	static int c;
	static int d;
	
	static int dirX[] = {0,1,0,-1};
	static int dirY[] = {-1,0,1,0};
	static int cnt = 0;
	static boolean flag;
	
	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		
		st = new StringTokenizer(br.readLine(), " ");
		
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		d = Integer.parseInt(st.nextToken());
		 
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		flag = true;
		while(flag) {
			move();
		}
		
		System.out.println(cnt);

	}
	
	// 북동남서 0123
	static void move() {
		
		// 청소 안했으면 하고 cnt++ 해준다.
		if(map[r][c] == 0) {
			cnt++;
			map[r][c] = 2;
		}
		
		// 네 방향에 대해서 탐색하고 청소안했으면 간다.
		for (int i = 0; i < 4; i++) {
			d = turnLeft(d);
			if(map[r + dirY[d]][c + dirX[d]] == 0) {
				r = r + dirY[d];
				c = c + dirX[d];
				return;
			}
		}
		
		// 네 방향 다 청소 끝나거나 벽이고, 뒤에가 벽이 아니면 뒤로 간다.
		if(map[r - dirY[d]][c - dirX[d]] != 1) {
			r = r - dirY[d];
			c = c - dirX[d];
		}
		
		// 그것도 아니면 끝!
		else {
			flag = false;
		}
		
	}
	
	// 왼쪽으로 돈다.
	static int turnLeft(int d) {
		return d == 0 ? 3 : d-1;
	}
}
