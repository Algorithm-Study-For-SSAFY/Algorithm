//Main_백준_3584_가장 가까운 공통 조상_

import java.io.*;
import java.util.*;

public class Main {
	static int answer = 0;
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int T = Integer.parseInt(br.readLine());
		
		
		
		for (int testCase = 1; testCase <= T; testCase++) {
		
			int N = Integer.parseInt(br.readLine());
			Node[] node = new Node[N];
			
			for (int i = 0; i < node.length; i++) {
				node[i] = new Node(i);
			}
			
			StringTokenizer st;
			for (int i = 0; i < N-1; i++) {
				st = new StringTokenizer(br.readLine());
				int parent = Integer.parseInt(st.nextToken()) - 1;
				int child = Integer.parseInt(st.nextToken()) - 1;
				node[child].parent = parent;
			}
			
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken()) - 1;
			int b = Integer.parseInt(st.nextToken()) - 1;
			
			Set<Integer> set = new HashSet<Integer>();
			set.add(a);
			set.add(b);
			
			// set에 자기의 부모를 계속계속 집어 넣다가
			// 이미 set에 존재하는 걸 찾으면 그게 공통 조상!
			// root의 부모는 -1로 설정했다.
			while(true) {
				if(node[a].parent != -1) {
					if(!set.add(node[a].parent)){
						System.out.println(node[a].parent + 1);
						break;
					}
					a = node[a].parent;
					
				}
				if(node[b].parent != -1) {
					if(!set.add(node[b].parent)){
						System.out.println(node[b].parent + 1);
						break;
					}
					b = node[b].parent;
				}
			}
			
		}
		
		
	} // end of Main
}// end of class

class Node{
	int value;
	int parent;
	public Node(int value) {
		super();
		this.value = value;
		parent = -1;
	}
}
